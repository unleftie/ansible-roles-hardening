---
- name: Pre-up playbook
  gather_facts: false
  ignore_unreachable: true
  hosts: all
  tasks:
    - name: Determine hosts that are up
      block:
        - name: Wait for hosts
          wait_for_connection:
            delay: 0
            sleep: 30
            timeout: 90
          vars:
            ansible_connection: ssh

        - name: Group up hosts that are up
          group_by:
            key: "running_hosts"
          changed_when: false
      rescue:
        - name: Print unreachable hosts
          debug:
            msg: "HOST UNREACHABLE {{ inventory_hostname }}"

- name: Initial playbook
  hosts: running_hosts
  become: true
  roles:
    - roles/ssh_hardening
    - roles/os_hardening

- name: Install Goss
  hosts: running_hosts
  become: true
  vars:
    github_user: "aelsabbahy"
    github_repo: "goss"
    goss_dst: "/usr/bin/goss"
    goss_version: "latest"
    goss_arch: "{{ goss_arch_map[ansible_architecture] | default(ansible_architecture) }}"
    goss_url: "https://github.com/{{ github_user }}/{{ github_repo }}/releases/download/{{ goss_version }}/goss-linux-{{ goss_arch }}"
    goss_arch_map:
      i386: "386"
      x86_64: "amd64"
      aarch64: "arm64"
      armv7l: "armv7"
      armv6l: "armv6"
  tasks:
    - name: Ensure dependencies are installed
      pip:
        name: github3.py
        break_system_packages: true
      register: _progress_status
      until: _progress_status is succeeded
      delay: 5
      retries: 5

    - name: Get latest Goss release
      block:
        - name: Get latest release
          community.general.github_release:
            user: "{{ github_user }}"
            repo: "{{ github_repo }}"
            token: "{{ lookup('env', 'GITHUB_TOKEN') }}"
            action: latest_release
          register: _latest_release
          until: _latest_release is succeeded
          delay: 5
          retries: 5

        - name: "Set version tag to {{ _latest_release.tag }}"
          set_fact:
            goss_version: "{{ _latest_release.tag }}"
      when: goss_version == "latest"
      run_once: true

    - name: Download and install Goss
      get_url:
        url: "{{ goss_url }}"
        dest: "{{ goss_dst }}"
        checksum: "sha256:{{ goss_url }}.sha256"
        mode: "0755"
        headers:
          Authorization: "Bearer {{ lookup('env', 'GITHUB_TOKEN') }}"
      register: _progress_status
      until: _progress_status is succeeded
      delay: 5
      retries: 5

- name: Verify with Goss
  hosts: running_hosts
  become: true
  vars:
    goss_dst: "/usr/bin/goss"
    goss_test_directory: "/tmp/goss"
    goss_format: "tap"
    roles_to_validate:
      - roles/ssh_hardening
      - roles/os_hardening
  tasks:
    - name: Include defaults vars
      include_vars:
        dir: "{{ lookup('env', 'PWD') }}/{{ item }}/defaults/"
        ignore_unknown_extensions: true
      with_items: "{{ roles_to_validate }}"

    - name: Include vars
      include_vars:
        dir: "{{ lookup('env', 'PWD') }}/{{ item }}/vars/"
        ignore_unknown_extensions: true
      with_items: "{{ roles_to_validate }}"

    - name: Create Goss test directory
      file:
        path: "{{ goss_test_directory }}"
        state: directory
        mode: "0755"

    - name: Set Goss test files
      set_fact:
        goss_test_files: "{{ goss_test_files | default([]) + lookup('fileglob', lookup('env', 'PWD') ~ '/' ~ item ~ '/molecule/default/tests/*.yml', wantlist=True) }}"
      with_items: "{{ roles_to_validate }}"

    - name: Copy Goss tests to remote
      template:
        src: "{{ item }}"
        dest: "{{ goss_test_directory }}/{{ item | basename | regex_replace('\\.yml$', '') }}_{{ item | hash('sha1') }}.yml"
        mode: "0644"
      with_items: "{{ goss_test_files }}"

    - name: Register test files
      shell: find {{ goss_test_directory }} -type f -name "*.yml"
      changed_when: false
      register: test_files

    - name: Execute Goss tests
      environment:
        PATH: "/opt/rh/rh-git218/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      command: "{{ goss_dst }} -g {{ item }} validate -f {{ goss_format }}"
      changed_when: false
      register: test_results
      with_items: "{{ test_files.stdout_lines }}"
      ignore_errors: true

    - name: Display details about the results
      debug:
        msg: "{{ item.stdout_lines }}"
      with_items: "{{ test_results.results }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
